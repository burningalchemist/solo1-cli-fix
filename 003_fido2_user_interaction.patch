--- a/solo/cli/key.py
+++ b/solo/cli/key.py
@@ -142,12 +142,6 @@

     import solo.hmac_secret

-    # check for PIN
-    if not pin:
-        pin = getpass.getpass("PIN (leave empty for no PIN): ")
-    if not pin:
-        pin = None
-
     solo.hmac_secret.make_credential(
         host=host,
         user_id=user,
@@ -155,7 +149,6 @@
         output=True,
         prompt=prompt,
         udp=udp,
-        pin=pin,
     )


@@ -170,7 +163,7 @@
 @click.option(
     "--prompt",
     help="Prompt for user",
-    default="Touch your authenticator to generate a reponse...",
+    default="Touch your authenticator to generate a response...",
     show_default=True,
 )
 @click.argument("credential-id")
@@ -193,10 +186,10 @@
     import solo.hmac_secret

     # check for PIN
-    if not pin:
-        pin = getpass.getpass("PIN (leave empty for no PIN): ")
-    if not pin:
-        pin = None
+   # if not pin:
+   #     pin = getpass.getpass("PIN (leave empty for no PIN): ")
+   # if not pin:
+   #     pin = None

     solo.hmac_secret.simple_secret(
         credential_id,
@@ -207,11 +200,10 @@
         prompt=prompt,
         output=True,
         udp=udp,
-        pin=pin,
     )


-@click.command()
+@click.command(hidden=True)
 @click.option("-s", "--serial", help="Serial number of Solo use")
 @click.option(
     "--udp", is_flag=True, default=False, help="Communicate over UDP with software key"
@@ -234,10 +226,11 @@
     p = solo.client.find(serial, udp=udp)
     import fido2

-    serialized_command = fido2.cbor.dumps({"subcommand": hash_type, "data": data})
+    serialized_command = fido2.cbor.encode({"subcommand": hash_type, "data": data})
+    print(serialized_command)
     from solo.commands import SoloBootloader

-    result = p.send_data_hid(SoloBootloader.HIDCommandProbe, serialized_command)
+    result = p.send_data_hid(SoloBootloader.CommandProbe, serialized_command)
     result_hex = result.hex()
     print(result_hex)
     if hash_type == "Ed25519":
@@ -349,13 +342,13 @@

     key = solo.client.find(serial, udp=udp)

-    if (
-        key.client
-        and ("clientPin" in key.client.info.options)
-        and key.client.info.options["clientPin"]
-        and not pin
-    ):
-        pin = getpass.getpass("PIN: ")
+#    if (
+#        key.client
+#        and ("clientPin" in key.client.info.options)
+#        and key.client.info.options["clientPin"]
+#        and not pin
+#    ):
+#        pin = getpass.getpass("PIN: ")

     # Any longer and this needs to go in a submodule
     print("Please press the button on your Solo key")
@@ -488,7 +481,7 @@
     print(f"took {duration} ms")


-@click.command()
+@click.command(hidden=True)
 @click.option("-s", "--serial", help="Serial number of Solo to use")
 @click.argument("sequence")
 def keyboard(serial, sequence):
@@ -526,8 +519,8 @@
 )
 def cred_info(pin, serial, udp):
     """Get credentials metadata"""
-    if not pin:
-        pin = getpass.getpass("PIN: ")
+    #if not pin:
+    #    pin = getpass.getpass("PIN: ")

     client = solo.client.find(serial, udp=udp)
     cm = client.cred_mgmt(pin)
@@ -587,11 +580,15 @@

     client = solo.client.find(serial, udp=udp)
     cm = client.cred_mgmt(pin)
-    cred = {"id": base64.b64decode(credential_id), "type": "public-key"}
+    try:
+      cred = {"id": base64.b64decode(credential_id), "type": "public-key"}
+    except Exception:
+      print("Error: 'credential-id' must be a valid base64 string")
+      return False
     cm.delete_cred(cred)


-@click.command()
+@click.command(hidden=True)
 @click.option("--pin", help="PIN for to access key")
 @click.option("-s", "--serial", help="Serial number of Solo to use")
 @click.argument("credential-id")
@@ -625,7 +622,7 @@
 key.add_command(challenge_response)
 key.add_command(reset)
 key.add_command(update)
-key.add_command(probe)
+#key.add_command(probe)
 key.add_command(change_pin)
 key.add_command(set_pin)
 # key.add_command(sha256sum)
@@ -635,9 +632,9 @@
 key.add_command(wink)
 key.add_command(disable_updates)
 key.add_command(ping)
-key.add_command(keyboard)
+#key.add_command(keyboard)
 key.add_command(cred)
-key.add_command(sign_file)
+#key.add_command(sign_file)
 cred.add_command(cred_info)
 cred.add_command(cred_ls)
 cred.add_command(cred_rm)
--- a/solo/devices/base.py
+++ b/solo/devices/base.py
@@ -80,18 +80,16 @@
         Ctap2(self.get_current_hid_device()).reset()

     def change_pin(self, old_pin, new_pin):
-        client = self.get_current_fido_client()
         ctap2 = Ctap2(self.get_current_hid_device())
         client_pin = ClientPin(ctap2)
         client_pin.change_pin(old_pin, new_pin)

     def set_pin(self, new_pin):
-        client = self.get_current_fido_client()
         ctap2 = Ctap2(self.get_current_hid_device())
         client_pin = ClientPin(ctap2)
         client_pin.set_pin(new_pin)

-    def make_credential(self, pin=None):
+    def make_credential(self):
         client = self.get_current_fido_client()
         rp = {"id": self.host, "name": "example site"}
         user = {"id": self.user_id, "name": "example user"}
@@ -102,22 +100,21 @@
             challenge,
             [{"type": "public-key", "alg": -8}, {"type": "public-key", "alg": -7}],
         )
-        result = client.make_credential(options, pin=pin)
+        result = client.make_credential(options)
         attest = result.attestation_object
         data = result.client_data
         try:
             attest.verify(data.hash)
         except AttributeError:
             verifier = Attestation.for_type(attest.fmt)
-            verifier().verify(attest.att_statement, attest.auth_data, data.hash)
+            verifier().verify(attest.att_stmt, attest.auth_data, data.hash)
         print("Register valid")
-        x5c = attest.att_statement["x5c"][0]
+        x5c = attest.att_stmt["x5c"][0]
         cert = x509.load_der_x509_certificate(x5c, default_backend())

         return cert

     def cred_mgmt(self, pin):
-        client = self.get_current_fido_client()
         ctap2 = Ctap2(self.get_current_hid_device())
         client_pin = ClientPin(ctap2)
         token = client_pin.get_pin_token(pin)
@@ -148,7 +145,6 @@

     def sign_hash(self, credential_id, dgst, pin):
         ctap2 = Ctap2(self.get_current_hid_device())
-        client = self.get_current_fido_client()
         if pin:
             client_pin = ClientPin(ctap2)
             pin_token = client_pin.get_pin_token(pin)
--- a/solo/devices/solo_v1.py
+++ b/solo/devices/solo_v1.py
@@ -5,8 +5,9 @@
 import tempfile
 import time
 from threading import Event
+from getpass import getpass

-from fido2.client import Fido2Client
+from fido2.client import Fido2Client, UserInteraction
 from fido2.ctap import CtapError
 from fido2.ctap1 import Ctap1
 from fido2.ctap2 import Ctap2
@@ -17,7 +18,19 @@
 from ..commands import SoloBootloader, SoloExtension
 from .base import SoloClient

+# Handle user interaction
+class CliInteraction(UserInteraction):
+     def prompt_up(self):
+         print("\nTouch your authenticator device now...\n")

+     def request_pin(self, permissions, rd_id):
+         return getpass("Enter PIN: ")
+
+     def request_uv(self, permissions, rd_id):
+         print("User Verification required.")
+         return True
+
+
 class Client(SoloClient):
     def __init__(
         self,
@@ -71,7 +84,8 @@
             self.ctap2 = None

         try:
-            self.client = Fido2Client(dev, self.origin)
+            self.client = Fido2Client(dev, self.origin,
+                                      user_interaction = CliInteraction())
         except CtapError:
             print("Not using FIDO2 interface.")
             self.client = None
--- a/solo/hmac_secret.py
+++ b/solo/hmac_secret.py
@@ -21,7 +21,6 @@
     host="solokeys.dev",
     user_id="they",
     serial=None,
-    pin=None,
     prompt="Touch your authenticator to generate a credential...",
     output=True,
     udp=False,
@@ -50,7 +49,6 @@
             ],
             "extensions": {"hmacCreateSecret": True},
         },
-        pin=pin,
     ).attestation_object

     credential = attestation_object.auth_data.credential_data
@@ -67,7 +65,6 @@
     host="solokeys.dev",
     user_id="they",
     serial=None,
-    pin=None,
     prompt="Touch your authenticator to generate a response...",
     output=True,
     udp=False,
@@ -101,7 +98,6 @@
             "allowCredentials": allow_list,
             "extensions": {"hmacGetSecret": {"salt1": salt}},
         },
-        pin=pin,
     ).get_response(0)

     output = assertion.extension_results["hmacGetSecret"]["output1"]
